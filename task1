#include <iostream>
using namespace std;

class DynamicMatrix {
private:
    int **matrix;
    int rows, cols;
    void allocate(int r, int c, int initVal = 0) {
        rows = r;
        cols = c;
        matrix = new int*[rows];
        for (int i = 0; i < rows; i++) {
            matrix[i] = new int[cols];
            for (int j = 0; j < cols; j++) {
                matrix[i][j] = initVal;
            }
        }
    }
public:
    DynamicMatrix(int r, int c, int initVal = 0) {
        allocate(r, c, initVal);
    }
    ~DynamicMatrix() {
        for (int i = 0; i < rows; i++) {
            delete[] matrix[i];
        }
        delete[] matrix;
    }
    void resize(int newRows, int newCols, int initVal = 0) {
        int **newMatrix = new int*[newRows];
        for (int i = 0; i < newRows; i++) {
            newMatrix[i] = new int[newCols];
            for (int j = 0; j < newCols; j++) {
                if (i < rows && j < cols) {
                    newMatrix[i][j] = matrix[i][j]; 
                } else {
                    newMatrix[i][j] = initVal;  
                }
            }
        }
        for (int i = 0; i < rows; i++) {
            delete[] matrix[i];
        }
        delete[] matrix;
        matrix = newMatrix;
        rows = newRows;
        cols = newCols;
    }
    void transpose() {
        int **newMatrix = new int*[cols];
        for (int i = 0; i < cols; i++) {
            newMatrix[i] = new int[rows];
            for (int j = 0; j < rows; j++) {
                newMatrix[i][j] = matrix[j][i];
            }
        }
        for (int i = 0; i < rows; i++) {
            delete[] matrix[i];
        }
        delete[] matrix;
        int temp = rows;
        rows = cols;
        cols = temp;
        matrix = newMatrix;
    }
    void addTwoToOddIndex() {
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                if ((i + j) % 2 == 1) {
                    matrix[i][j] += 2;
                }
            }
        }
    }
    void print(){
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                cout << matrix[i][j] << " ";
            }
            cout << endl;
        }
        cout << endl;
    }
};
int main() {
    DynamicMatrix mat(3, 3, 1);
    cout << "Initial Matrix:\n";
    mat.print();
    mat.resize(4, 5, 7);
    cout << "After Resizing to 4x5:\n";
    mat.print();
    mat.transpose();
    cout << "After Transpose:\n";
    mat.print();
    mat.addTwoToOddIndex();
    cout << "After Adding 2 to Odd Indices:\n";
    mat.print();
    return 0;
}
